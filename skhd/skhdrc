# ################################################################ # THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# ================================ 窗口设置 ================================
# focus window : 激活窗口快捷键  h: 左  j: 下  k: 右 l: 上 
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east 
# 交换窗口位置
# shift + alt - h : yabai -m window --swap west
# shift + alt - j : yabai -m window --swap south
# shift + alt - k : yabai -m window --swap north
# shift + alt - l : yabai -m window --swap east
# 移动窗口位置
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east
# 浮动窗口设置 参考了Magent默认设置。因为之前用习惯了。。。。
# 恢复原始窗口大小
ctrl + alt - 0 : yabai -m space --balance
# 把浮动窗口左右平分整个屏幕  rows:cols:start-x:star-y:width:height  m行:n列:x:y:w:h
# # 最大化
# ctrl + alt - return : yabai -m window --grid 1:1:0:0:1:1
# # 2分屏上
# ctrl + alt - up     : yabai -m window --grid 2:1:0:0:2:1
# # 2分屏左
# ctrl + alt - left   : yabai -m window --grid 1:2:0:0:1:1
# # 2分屏右
# ctrl + alt - right  : yabai -m window --grid 1:2:1:1:1:1
# # 2分屏下
# ctrl + alt - down   : yabai -m window --grid 2:1:0:1:2:1
# # 4分屏左上
# ctrl + alt - u : yabai -m window --grid 2:2:0:0:1:1
# # 4分屏右上
# ctrl + alt - j : yabai -m window --grid 2:2:0:1:1:1
# # 4分屏左下
# ctrl + alt - i : yabai -m window --grid 2:2:1:0:1:1
# # 4分屏右下
# ctrl + alt - k : yabai -m window --grid 2:2:1:1:1:1
# # 3分屏左1
# ctrl + alt - d : yabai -m window --grid 1:3:0:0:1:1
# # 3分屏左2
# ctrl + alt - e : yabai -m window --grid 1:3:0:0:2:1
# # 3分屏中1
# ctrl + alt - f : yabai -m window --grid 1:3:1:0:1:1
# # 3分屏右2
# ctrl + alt - t : yabai -m window --grid 1:3:1:0:2:1
# # 3分屏右1
# ctrl + alt - g : yabai -m window --grid 1:3:3:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + cmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

# create desktop and follow focus - uses jq for parsing json (brew install jq)
alt + cmd - n : yabai -m space --create && \
                index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                yabai -m space --focus "${index}"

alt + cmd - c : yabai -m space --create

# 浮动/不浮动窗口 float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;yabai -m window --grid 4:4:1:1:2:2

alt - r         : yabai -m space --rotate 90

# 调整窗口大小
ctrl +  cmd - h : yabai -m window --resize left:-50:0; yabai -m window --resize right:-50:0
ctrl +  cmd - j : yabai -m window --resize bottom:0:50; yabai -m window --resize top:0:50
ctrl +  cmd - k : yabai -m window --resize top:0:-50; yabai -m window --resize bottom:0:-50
ctrl +  cmd - l : yabai -m window --resize right:50:0; yabai -m window --resize left:50:0

# 重启 Yabai
alt + cmd - r : /usr/bin/env osascript <<< "display notification \"正在重启 Yabai\" with title \"Yabai\""; yabai --restart-service

# ================================ 多桌面配置  ================================
# 切换回最近的一个桌面
alt - x : yabai -m space --focus recent
# 切换回第一个桌面
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9
# 关闭当前桌面
shift + cmd - w : yabai -m space --destroy

# 把窗口发送到桌面，并跟随过去 send window to desktop and follow focus
shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
shift + cmd - 1 : yabai -m window --space  1; yabai -m space --focus 1
shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
shift + cmd - 3 : yabai -m window --space  3; yabai -m space --focus 3
shift + cmd - 4 : yabai -m window --space  4; yabai -m space --focus 4
shift + cmd - 5 : yabai -m window --space  5; yabai -m space --focus 5
shift + cmd - 6 : yabai -m window --space  6; yabai -m space --focus 6
shift + cmd - 7 : yabai -m window --space  7; yabai -m space --focus 7
shift + cmd - 8 : yabai -m window --space  8; yabai -m space --focus 8
shift + cmd - 9 : yabai -m window --space  9; yabai -m space --focus 9

# destroy empty spaces
shift + alt + cmd - w : echo "destroy empty spaces";\
                        yabai -m query --spaces \
                        | jq 'reverse | .[] | select((.windows | length) == 1) | .index' \
                        | xargs -I{} yabai -m space {} --destroy

# ================================ APPS ================================
# iTerm2
# cmd + alt- return : open -a iTerm

# ================================ 多显示器配置 ================================
# # focus monitor(切换显示器焦点)
# # ctrl + alt - x  : yabai -m display --focus recent
# # ctrl + alt - z  : yabai -m display --focus prev
# # ctrl + alt - c  : yabai -m display --focus next
# ctrl + alt - 1  : yabai -m display --focus 1
# ctrl + alt - 2  : yabai -m display --focus 2
# ctrl + alt - 3  : yabai -m display --focus 3
#
# # send window to monitor and follow focus(将当前活跃窗口发送到指定显示器)
# # ctrl + cmd - x  : yabai -m window --display recent; yabai -m display --focus recent
ctrl + cmd - z  : yabai -m window --display prev; yabai -m display --focus prev
ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2
ctrl + cmd - 3  : yabai -m window --display 3; yabai -m display --focus 3
#
# # move window
# # shift + ctrl - a : yabai -m window --move rel:-20:0
# # shift + ctrl - s : yabai -m window --move rel:0:20
# # shift + ctrl - w : yabai -m window --move rel:0:-20
# # shift + ctrl - d : yabai -m window --move rel:20:0
#
# # increase window size(增加窗口大小aswd)
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - s : yabai -m window --resize bottom:0:20
# shift + alt - w : yabai -m window --resize top:0:-20
# shift + alt - d : yabai -m window --resize right:20:0
#
# # decrease window size(减少窗口大小aswd)
# shift + cmd - a : yabai -m window --resize left:20:0
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20
# shift + cmd - d : yabai -m window --resize right:-20:0
#
# # set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west
# ctrl + alt - j : yabai -m window --insert south
# ctrl + alt - k : yabai -m window --insert north
# ctrl + alt - l : yabai -m window --insert east
#
# # rotate tree(逆时针旋转空间多个窗口)
# alt - r : yabai -m space --rotate 90
#
# # mirror tree y-axis(纵轴调换窗口)
# alt - y : yabai -m space --mirror y-axis
#
# # mirror tree x-axis(横轴调换窗口)
# alt - x : yabai -m space --mirror x-axis
#
# # toggle desktop offset
# alt - a : yabai -m space --toggle padding; yabai -m space --toggle gap
#
# # toggle window parent zoom
# alt - d : yabai -m window --toggle zoom-parent
#
# # toggle window fullscreen zoom(单个窗口进入或退出全屏)
# alt - f : yabai -m window --toggle zoom-fullscreen
#
# # toggle window native fullscreen(单个窗口进入或退出真全屏-上方的icon都会消失)
# shift + alt - f : yabai -m window --toggle native-fullscreen
#
# # toggle window border
# shift + alt - b : yabai -m window --toggle border
#
# # toggle window split type(切换分割方式)
# alt - e : yabai -m window --toggle split
#
# # float / unfloat window and center on screen(控制窗口是否进入float模式,进入的话就不会自动被排列)
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2
#
# # toggle sticky (show on all spaces)
# alt - s : yabai -m window --toggle sticky
#
# # toggle topmost (keep above other windows)
# alt - o : yabai -m window --toggle topmost
#
# # toggle sticky(+float), topmost, border and picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle border;\
#           yabai -m window --toggle pip
#
# # change layout of desktop(更换layout方式)
# ctrl + alt - a : yabai -m space --layout bsp
# ctrl + alt - d : yabai -m space --layout float
#
